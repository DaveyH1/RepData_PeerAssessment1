geom_histogram()
ggplot(b, aes(x = b)) +
geom_histogram()
rm(list = ls())
set.seed(10)
rnorm(5)
rnorm(5)
set.seed(10)
rnorm(5)
set.seed(1)
rpois(5,2)
>qpois()
?qpois
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
selecr(cran, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, -X:size)
select(cran, -X:-size)
-5:20
-(5:20)
select(cran, -(X-size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country = "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
swirl()
## Register application with GitHub to conect to API and answer
## questions
## Load library
library(httr)
library(jsonlite)
## Set up the authentication for GutHub
oauth_endpoints("github")
myapp <- oauth_app("github", key = "64904002cd175348824c",
secret = "bce88f3e95c42b9d762d1dee022f8592efef4c54")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
## Now do the request
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
json1 <- content(req)
## Convert to DataFrame
json2 <- jsonlite::fromJSON(toJSON(json1))
## Find the correspondiing row
rowNo <- json2[which(json2$url == "https://api.github.com/repos/jtleek/datasharing"),]
## Get the date it was created
rowNo$created_at
swirl()
library(swirl)
swirl()
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- pollution$region
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow-c(2,1), mar=c(4,4,2,1))
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25,col = "green")
hist(sunset(pollution, region == "west"),col = "green")
hist(subset(pollution, region == "west"),col = "green")
hist(subset(pollution, region == "west")[,1],col = "green")
hist(subset(pollution, region == "west")$pm25,col = "green")
with(pollution, plot(latitude ~ pm25))
with(pollution, plot(latitude,pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude,pollution$pm25,col = pollution$region)
plot(pollution$latitude,ppm,col = pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1,2),mar=c(5,4,2,1))
wes <- subest(pollution, region == "west")
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
rm(ls())
rm(list = ls(0)
rm(list = ls())
library(swirl   )
swirl()
?Devices
with(failthful, plot(eruptions,waiting))
with(faithful, plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed,dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4.1)
)
xyplot(Life.Exp ~ Income | region, data = state, layout(c(4.1)))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, data = airquality)
boxplot(Ozone~Month, data = airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set = "n")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozine in NYC")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month = 5)
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, pch = 17, col = "blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col="red", pch = 8)
legend("topright", pch = c(17,8), col = c("blue","red"), legend = c("May","Other Months"))
abline(v = median(airquality$Wind), lty=2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation)
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Oxone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
rm(list = ls())
library(swirl)
swirl()
swirl()
head(airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind, data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x |f, layout = c(2,1))
v1
v2
myedit(plot1.R)
myedit("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color * cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat | color * cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
samples(colors())
sample(colors(), 10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue","green"), alpha = 0.5)
p3(5)
plot(x,y,pch=19,col = rgb(0,0.5,0.5))
plot(x,y,pch=19,col = rgb(0,0.5,0.5,0.3))
cols <- brewer.pal((3,"BuGn"))
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano,col = pal(20))
image(volcano,col = p1(20)
)
rm(list = ls())
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point","smooth"))
qplot(hwy, data = mpg, color = drv)
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, color = drv)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm", facet_grid(.~drv))
g+geom_point()+geom_smooth(method = "lm", facet_grid = . ~ drv)
g+geom_point()+geom_smooth(method = "lm"+ facet_grid(. ~ drv))
g+geom_point()+geom_smooth(method = "lm") + facet_grid(. ~ drv))
g+geom_point()+geom_smooth(method = "lm") + facet_grid(. ~ drv)
g+geom_point()+geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swir Rules")
g+geom_point()+geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swir Rules!")
g+geom_point()+geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size =4, alpha = 0.5)
g+geom_point(size =4, alpha = 0.5, aes(color = drv))
g+geom_point(aes(color = drv), labs(title = "Swirl Rules!"), labs(x = "Displacemen", y="Hwy Mileage"))
g+geom_point(aes(color = drv), labs(title = "Swirl Rules!",x = "Displacemen", y="Hwy Mileage")
)
g+geom_point(aes(color = drv), labs(title = "Swirl Rules!"),labs(x = "Displacemen", y="Hwy Mileage"))
g+geom_point(aes(color = drv), labs(title = "Swirl Rules!"),labs(x = "Displacement", y="Hwy Mileage"))
g+geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") +labs(x = "Displacement", y="Hwy Mileage")
g+geom_point(aes(color = drv, size = 2, alpha = 0.5)) + geom_smooth(size = 4, lty = 3, method = "lm", se = FALSE)
g+geom_point(aes(color = drv, size = 2, alpha = 0.5)) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g+geom_point(aes(color = drv, size=2, alpha=1/2)) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) +
| geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
| geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(color = drv), theme_bw(base_family = "Times")
g + geom_point(color = drv) + theme_bw(base_family = "Times")
g + geom_point(color = drv, theme_bw(base_family = "Times")
)
g + geom_point(aes(color = drv), theme_bw(base_family = "Times"))
g + geom_point(aes(color = drv) + theme_bw(base_family = "Times"))
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim = c(3,3))
plot(myx, myy, type="l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x=myx, y=myy))
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line(aes(ylim(-3,3)))
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y=hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyv, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm",size=2, se = FALSE, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm",size=2, se = FALSE, color = "black") + labs(x = "Displacement", y="Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut())
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut
)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm") + facet_grid(.~cut)
qplot(carat, price, data = diamonds, color = cut, facets=.~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, proce))
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_path(alpha = 1/3
)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length = 4),na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd, ]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, coor = "pink")
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds,aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut())
ggplot(diamonds,aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut
)
rm(lisr = ls())
rm(lisrt = ls())
rm(list = ls())
library(swirl)
swirl()
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[12,])
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(x[, 1:3])
mdist <- dist(sub1[, 1:3])
hclustering <- hclust(mdist)
mypclust(hclustering, lab.col = unclass(sub1$activity)
)
myplclust(hclustering, lab.col = unclass(sub1$activity)
)
mdist <- dist(sub1[, 10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[, -c(562,563)]))
dim(svd$u)
dim(svd1$u)
maxCon <- which.max(svd1$v[, 2])
mdist <- dist(c(sub1[10:12], maxCon))
mdist <- dist(c(sub1[ , 10:12], maxCon))
mdist <-
)
mdist <- dist(c(sub1[ , 10:12], maxCon))
c(sub1[, 10:12], maxCon)
mdist <- dist(sub1[ ,c( 10:12], maxCon)])
mdist <- dist(sub1[ ,c( 10:12, maxCon)])
hclustering <- hclust(mdist)
mypclust(hclustering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c[562,563]], centers = 6)
kClust <- kmeans(sub1[, -c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- table(kClust$cluster, sub1$activity, nstart = 100)
kClust <- kmeans(sub1[, -c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[, 1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
install.packages("curl")
?aggregate
act <- read.csv("activity.csv")
unzip("activity.zip")
act <- read.csv("activity.csv")
setwd("C:/Users/dave_/OneDrive/GitHub/Coursera/Reproducible Research/Week 2 Assignment 1/RepData_PeerAssessment1")
act <- read.csv("activity.csv")
aggregate(act$steps, by = act$date, mean)
aggregate(act$steps, by = list(act$date), mean)
aggregate(act$steps, by = list(act$date), mean, na.rm = T)
stepDate <- aggregate(act$steps, by = list(act$date), sum, na.rm = T)
stepDate <- aggregate(steps = act$steps, by = list(act$date), sum, na.rm = T)
stepDate <- aggregate(steps = steps, by = list(date), sum, na.rm = T, data = act)
stepDate <- aggregate(steps = steps, by = list(date), sum, data = act, na.rm = T)
stepDate <- aggregate(steps = steps, by = list(date = date), sum, data = act, na.rm = T)
stepDate <- aggregate(steps = act$steps, by = list(date = act$date), sum, na.rm = T)
stepDate <- aggregate(act$steps, by = list(date = act$date), sum, na.rm = T)
stepDate <- aggregate(steps, by = list(date = date), sum, na.rm = T, data = act)
stepDate <- aggregate(steps, by = list(date = date), sum, data = act, na.rm = T)
stepDate <- aggregate(act$steps, by = list(date = act$date), sum, na.rm = T)
View(stepDate)
stepDate <- aggregate(act$steps, by = list(date = act$date), sum)
View(stepDate)
mean(stepDate$x, na.rm = T)
hist(stepDate$x ~ stepDate$date)
hist(stepDate$date ~ stepDate$x)
hist(stepDate$date ~ stepDate$x)
?hst
?hist
hist(stepDate$x)
hist(stepDate$x, breaks = 61)
library(ggplot2)
ggplot(stepDate, aes(x  = x)) +
geom_histogram()
ggplot(stepDate, aes(x  = date)) +
geom_histogram()
ggplot(stepDate, aes(x  = date)) +
geom_histogram(stat = "count")
ggplot(stepDate, aes(x  = x)) +
geom_histogram()
ggplot(stepDate, aes(x  = x)) +
geom_histogram(binwidth = 61)
hist(stepDate$x, breaks = 61)
hist(stepDate$x, breaks = 61, main = "Total Steps by Day")
hist(stepDate$x, breaks = 61, main = "Total Steps by Day", xlab = "Steps")
ggplot(stepDate, aes(x  = x)) +
geom_histogram(bins = 61)
ggplot(stepDate, aes(x  = x, fill = date)) +
geom_histogram()
ggplot(stepDate, aes(x  = x)) +
geom_histogram()
meanStep <- round(mean(stepDate$x, na.rm = T),3)
medianSteps <- round(median(stepDate$x, na.rm = T),3)
act
avgSteps <- aggregate(act$steps, by = list(date = act$date), mean)
View(avgSteps)
ggplot(avgSteps, aes(x = date, y = x)) +
geom_line()
ggplot(avgSteps, aes(x = date, y = x, grouos = 1)) +
geom_line()
ggplot(avgSteps, aes(x = date, y = x, grouop = 1)) +
geom_line()
ggplot(avgSteps, aes(x = date, y = x, group = 1)) +
geom_line()
avgSteps <- aggregate(act$steps, by = list(date = act$date), mean, na.rm = T)
ggplot(avgSteps, aes(x = date, y = x, group = 1)) +
geom_line()
avgSteps <- aggregate(act$steps, by = list(date = act$date), mean)
ggplot(avgSteps, aes(x = date, y = x, group = 1)) +
geom_line()
avgSteps <- aggregate(act$steps, by = list(date = act$date), mean, na.action(0))
avgSteps <- aggregate(act$steps, by = list(date = act$date), mean, na.omit()
avgSteps <- aggregate(act$steps, by = list(date = act$date), mean, na.omit())
avgSteps <- aggregate(act$steps, by = list(date = act$date), mean)
ggplot(avgSteps, aes(x = interval, y = x, group = 1)) +
geom_line()
avgSteps <- aggregate(act$steps, by = list(interval = act$interval), mean)
View(avgSteps)
ggplot(avgSteps, aes(x = interval, y = x, group = 1)) +
geom_line()
avgSteps <- aggregate(act$steps, by = list(interval = act$interval), mean, na.rm = T)
ggplot(avgSteps, aes(x = interval, y = x, group = 1)) +
geom_line()
class(avgSteps)
which(avgSteps, max(avgSteps$x))
which(avgSteps$x, max(avgSteps$x))
which(avgSteps$x == max(avgSteps$x))
avgSteps[which(avgSteps$x == max(avgSteps$x)),]
avgSteps[which(avgSteps$x == max(avgSteps$x)),]$interval
